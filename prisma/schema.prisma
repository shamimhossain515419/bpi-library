datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    providerFeature = ["orderByRelation"]
}

model Post {
    id         String  @id @default(auto()) @map("_id") @db.ObjectId
    title      String
    userId     String  @db.ObjectId
    User       User    @relation(fields: [userId], references: [id])
    userDataId String? @db.ObjectId
}

model User {
    id         String      @id @default(auto()) @map("_id") @db.ObjectId
    email      String      @unique
    name       String?
    department String?
    isRole     String?
    semester   String?
    roll       Int?
    shift      String?
    gruop      String?
    session    String?
    reg        Int?
    phone      Int?
    createdAt  DateTime    @default(now())
    Comment    Comment[]
    UserBooks  UserBooks[]
    Post       Post[]
}

model Books {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    name        String      @unique
    title       String // Title of the book
    image1      String // Optional image link 1
    price       Float? // Optional price of the book
    category    String // Category of the book
    writer_name String // Name of the book's writer
    quantity    Int // Quantity of books available
    description String? // Optional book description
    department  String?
    createdAt   DateTime    @default(now()) // Creation timestamp
    comment     Comment[] // Array of comments associated with the book
    UserBooks   UserBooks[]
}

model UserBooks {
    id     String  @id @default(auto()) @map("_id") @db.ObjectId
    userId String  @db.ObjectId
    status Boolean
    bookId String
    user   User    @relation(fields: [userId], references: [id])
    book   Books   @relation(fields: [bookId], references: [id])
}

// Comment model represents comments associated with books
model Comment {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    comment String // Actual comment text
    books   Books  @relation(fields: [booksId], references: [id])
    booksId String @db.ObjectId
    user    User   @relation(fields: [userId], references: [id])
    userId  String @db.ObjectId
}

type Address {
    street String
    city   String
    state  String
    zip    String
}
